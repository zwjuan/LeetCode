树相关算法解题思路：
1. 递归思想
2. 借助栈
------------------------------------------------------------------------------
1.构建二叉树
   前序遍历中序/后序遍历（递归&非递归） - 记录左右子树的节点的个数
2. 遍历：
   层序遍历  - 使用队列和二维数组
   前序遍历、中序遍历、后序遍历 - 使用递归或迭代（栈）
3. 求二叉树的高度 树的深度 - 深度优先遍历&广度优先遍历 （广度优先遍历借助栈）
   最大深度 - 递归 左子树深度和右子树深度  1+两个最小值
   最小深度 - 递归 主要链表的情况
   参考：https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/solution/li-jie-zhe-dao-ti-de-jie-shu-tiao-jian-by-user7208/
4. 二叉树的镜像
5. 对称二叉树 -递归  本身值是否相等&&左子树和右子树&&右子树和左子树
6. 第K大结点
7. 公共结点
8. 求叶子节点的个数 ， 求左叶子结点之和
9. 求二叉树第k层的节点个数

树相关面试题
1. 前序/中序/后序遍历（递归&非递归） - 记录左右子树的节点的个数
2. 层序遍历
3. 求二叉树的高度 （最大深度和最小深度）
4. 求叶子节点的个数/叶子结点之和
5. 求二叉搜索树第K层结点的个数  - 二叉搜索树中序遍历有序
6. 判断一个结点是否在一颗二叉树中 - 相当于遍历二叉树
7. 求两个结点的最近公共祖先（分为二叉树和二叉搜索树）
8. 判断一个树是否是完全二叉树 - 1. 利用层序遍历思想，左右子树均不为null 时，继续遍历 2. 左子树为null, 右自身不为null 返回fase 3. 左子树不weinull, 右子树为null 判断左子树是否为叶子结点
9. 求二叉树的镜像
10. 对称的二叉树
11. 树的子结构
12. 由前序和中序重建二叉树
13. 二叉树与双向链表
